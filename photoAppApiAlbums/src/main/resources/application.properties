spring.config.import=optional:configserver:http://localhost:8012

# El valor 0 de esta propiedad indica que el puerto se elige aleatoriamente entre los disponibles de la máquina
server.port=${PORT:0}
# Importante para el registro de este microservicio en el servidor Eureka como cliente. Se usará este nombre para el registro
spring.application.name=albums-ws
# Propiedad para indicar donde se encuentra el servidor de descubrimiento Eureka para que este microservicio se registre como cliente
# Si se omite, por defecto se intenta localizar al servidor en la url "http://localhost:8761/eureka", es decir, el puerto 8761 es el puerto por defecto del servidor Eureka si no se establece otro puerto
# En nuestro caso en concreto, se ha establecido el puerto 8010 para el servidor Eureka
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka
# Si dos o más instancias de un microservicio se registran en el servidor Eureka con el mismo nombre y el mismo puerto, únicamente se mantiene en el servidor Euureka la última instancia registrada
# Como estamos usando el valor 0 para generar puertos aleatorios en cada instancia, Eureka siempre toma el valor 0 para el puerto en el registro de dichas instancias. Entonces, para asegurarnos de que todas las instancias de un microservicio se registran en Eureka, usamos la siguiente propiedad con el siguiente valor para que sean únicos:
# Cada instancia del microservicio se registrará usando el nombre del microservicio(${spring.application.name} seguido de ":" y seguido del valor de la propiedad "${spring.application.instance_id}" si existe. Si no existe esa propiedad, se utiliza, a continuación de los ":", un valor aleatorio único generado por la expresión "${random.value}" 
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# Host y puerto del broker de mensajería RabbitMQ y sus credenciales. En este caso son opcionales porque usamos los valores por defecto
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=${RABBITMQ_USERNAME}
spring.rabbitmq.password=${RABBITMQ_PASSWORD}

# Desactivamos Spring Cloud Bus cuando no queremos que se conecte ni haga reintentos de conexión con el broker de mensajería RabbitMQ
spring.cloud.bus.enabled=false
# Como hemos desactivado Spring Cloud Bus y usamos Spring Boot Actuator, también deactivamos la comprobación de salud de RabbitMQ para
# que no afecte a la comprobación de salud de esta aplicación Spring Boot
management.health.rabbit.enabled=false

# En esta versión de Spring Boot, por defecto se envía a Zipkin un 10% de las trazas
# Si ponemos el valor "0.1", significa que se envía un 10% de información(1 de cada 10 trazas) al servidor Zipkin
# Si ponemos el valor "1", significa que se envía el 100% de la información(trazas) al servidor Zipkin
# Nota: En Producción, debe establecerse valores bajos en esta propiedad para no perjudicar el rendimiento de la aplicación
management.tracing.sampling.probability=1

# Formato o patrón de los logs para mostrar los ids de los span y los ids de las trazas
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

# Para la centralización de logs en un único sitio usando el stack ELK, es necesario esribir los logs en un fichero(Hasta ahora los logs sólo se mostraban por consola)
# Para ello usamos la siguiente propiedad:
# Como no hemos especificado ninguna ruta, el archivo se crea en el directorio raíz del proyecto de esta aplicación Spring Boot
#logging.file.name=${spring.application.name}.log
logging.file.name=../api-logs/${spring.application.name}.log
