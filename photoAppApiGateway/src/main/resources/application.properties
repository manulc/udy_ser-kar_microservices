spring.config.import=optional:configserver:http://localhost:8012,optional:.env[.properties]

server.port: 8011
# Importante para el registro de este gateway en el servidor Eureka como cliente. Se usará este nombre para el registro
spring.application.name: api-gateway
# Propiedad para indicar donde se encuentra el servidor de descubrimiento Eureka para que este gateway se registre como cliente
# Si se omite, por defecto se intenta localizar al servidor en la url "http://localhost:8761/eureka", es decir, el puerto 8761 es el puerto por defecto del servidor Eureka si no se establece otro puerto
# En nuestro caso en concreto, se ha establecido el puerto 8010 para el servidor Eureka
eureka.client.service-url.defaultZone: http://localhost:8010/eureka

# Nota: El mapeo de rutas automático y manual pueden convivir satisfactoriamente al mismo tiempo

# Nota: Spring Cloud Gateway por defecto establece cabeceras de tipo proxy("Forwarded-*" y "X-Forwarded-*") en las peticiones http de enrutamiento que realiza

# Activamos el mapeo de rutas automático de este Api Gateway usando el servidor de descubrimiento(Usando este método automático, el nombre de los microservicios registrados tiene que aparecer en la rutas, o paths, de las peticiones http. Por ejemplo: "http://localhost:8082/USERS-WS/users/status/check", donde "USERS-WS" es el nombre del microservicio en mayúscula)
# Si activamos esta propiedad, este Api Gateway es capaz de enrutar automáticamente peticiones http, sin tener la necesidad de configurar nuestras propias rutas, a los diferentes microservicios registrados en el servidor de descubrimiento Eureka 
# Es decir, usando el servidor de descubrimiento Eureka, el Api Gateway es capaz de enrutar peticiones http de forma automática a los diferentes microservicios registrados en ese servidor Eureka
# Por ejemplo, si en el servidor Eureka hay un microservicio registrado con el nombre "USERS-WS" y se realiza la petición http GET "http://localhost:8082/USERS-WS/users/status/check" al Gateway, este Gateway enruta, o envía, la petición http GET "/users/status/check" a ese microservicio "USERS-WS"
#spring.cloud.gateway.discovery.locator.enabled: true
# Con la propiedad de arriba activa, el Api Gateway sólo es capaz de detectar los microservicios usando sus nombres de registro en el servidor de descubrimiento Eureka en mayúscula para el mapeo automático de peticiones http
# Si se desea que este Api Gateway sea capaz de detectar esos microservicios usando sus nombres en minúscula en vez de en mayúscula, tenemos que activar la siguiente propiedad:
#spring.cloud.gateway.discovery.locator.lower-case-service-id:true

# Mapeo de rutas manual
spring.cloud.gateway.routes[0].id:users-ws-status-check
spring.cloud.gateway.routes[0].uri:lb://users-ws
# Esta ruta externa del Api Gateway también se aplica a la ruta interna, es decir, a la ruta del enrutamiento hacia el destino
spring.cloud.gateway.routes[0].predicates[0]:Path=/users-ws/users/status/check
# Es posible especificar más de un método:  spring.cloud.gateway.routes[0].predicates[1]: Method=GET, POST, PUT, DELETE
spring.cloud.gateway.routes[0].predicates[1]: Method=GET
# Este predicado comprueba si la petición http contiene una cabecera "Authorization" con el valor "Bearer " seguido de una cadena de caracteres alfanuméricos(token JWT)
#spring.cloud.gateway.routes[0].predicates[2]: Header=Authorization, Bearer (.*)
# Podemos configurar filtros. Por ejemplo, si no queremos que al destino lleguen la cabecera con las cookies de las peticione http, establecemos el siguiente filtro:
#spring.cloud.gateway.routes[0].filters[0]: RemoveRequestHeader=Cookie
# Debido a que la ruta externa del APi Gateway "/users-ws/users/status/check" también se utiliza por defecto en la ruta interna, pero la ruta interna adecuada de la Api del microservicio "users-ws" es "/users/status/check", tenemos que reescribir esa ruta externa de la siguiente manera:
# Se sustituye la ruta "/users-ws/users/status/check" del exterior del Api Gateway por la ruta "/users/status/check" del interior hacia el microservicio "users-ws"
#spring.cloud.gateway.routes[0].filters[1]: RewritePath=/users-ws/users/status/check, /users/status/check
# Mismo filtro de sobrescritura que el anterior pero usando expresiones regulares
spring.cloud.gateway.routes[0].filters[0]: RewritePath=/users-ws/(?<segment>.*), /$\{segment}
# Filtro personalizado que valida el token JWT en la cabecera de la petición http
spring.cloud.gateway.routes[0].filters[1]: AuthorizationHeaderFilter

# Las rutas para crear un usuario o autenticarse no requiren validación de token JWT en la cabecera de la petición http
spring.cloud.gateway.routes[1].id: users-ws-create-login
spring.cloud.gateway.routes[1].uri: lb://users-ws
spring.cloud.gateway.routes[1].predicates[0]: Path=/users-ws/users,/users-ws/users/login
spring.cloud.gateway.routes[1].predicates[1]: Method=POST
spring.cloud.gateway.routes[1].filters[0]: RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]: RewritePath=/users-ws/(?<segment>.*), /$\{segment}

# Las rutas para acceder a la consola H2 y a los endpoints de Actuator no requiren validación de token JWT en la cabecera de la petición http
spring.cloud.gateway.routes[2].id: users-ws-actuator-h2-console
spring.cloud.gateway.routes[2].uri: lb://users-ws
spring.cloud.gateway.routes[2].predicates[0]: Path=/users-ws/actuator/**,/users-ws/h2-console
spring.cloud.gateway.routes[2].predicates[1]: Method=GET
spring.cloud.gateway.routes[2].filters[0]: RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]: RewritePath=/users-ws/(?<segment>.*), /$\{segment}

# Las rutas para obtener usuarios, actualizarlos o eliminarlos sí requieren validación de token JWT en la cabecera de la petición http
spring.cloud.gateway.routes[3].id: users-ws-get-update-delete
spring.cloud.gateway.routes[3].uri: lb://users-ws
spring.cloud.gateway.routes[3].predicates[0]: Path=/users-ws/users/**
spring.cloud.gateway.routes[3].predicates[1]: Method=GET,PUT,DELETE
#spring.cloud.gateway.routes[3].predicates[2]: Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0]: RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]: RewritePath=/users-ws/(?<segment>.*), /$\{segment}
spring.cloud.gateway.routes[3].filters[2]: AuthorizationHeaderFilter

authorization.token.header.name: Authorization
authorization.token.header.prefix: Bearer
token.secret: ${TOKEN_SECRET}

# Host y puerto del broker de mensajería RabbitMQ y sus credenciales. En este caso son opcionales porque usamos los valores por defecto
spring.rabbitmq.host: localhost
spring.rabbitmq.port: 5672
spring.rabbitmq.username: ${RABBITMQ_USERNAME}
spring.rabbitmq.password: ${RABBITMQ_PASSWORD}

# Desactivamos Spring Cloud Bus cuando no queremos que se conecte ni haga reintentos de conexión con el broker de mensajería RabbitMQ
spring.cloud.bus.enabled: false
# Como hemos desactivado Spring Cloud Bus y usamos Spring Boot Actuator, también deactivamos la comprobación de salud de RabbitMQ para
# que no afecte a la comprobación de salud de esta aplicación Spring Boot
management.health.rabbit.enabled: false

# Exponemos los endpoints "health", "gateway" y "mappings" de Spring Actuator
management.endpoint.gateway.enabled: true
management.endpoints.web.exposure.include: health,gateway,mappings
