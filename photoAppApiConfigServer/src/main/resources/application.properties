# Nota: Aúnque es posible, no usar aquí texto encriptado("{cipher}") generado por este servidor de configuraciones
# porque si cambia alguno de estos valores(por ejemplo, alguna contraseña), esta aplicación Spring Boot ya no
# arrancará y, por lo tanto, tampoco podremos generar los nuevos textos encriptados para esos valores que han cambiado 

spring.config.import=optional:.env[.properties]

server.port=8012

# Clave para la encriptación simétrica(Symmetric Encryption - Se usa una misma clave para encriptar y desencriptar)
# Para encriptar -> Petición http POST a la ruta "/encrypt" junto con el texto plano que se quiere encriptar en el body, o cuerpo, de dicha petición http
# Para desencriptar -> Petición http POST a la ruta "/decrypt" junto con el texto encriptado que se quiere desencriptar en el body, o cuerpo, de dicha petición http
# Se comenta porque ahora usamos encriptación asimétrica
#encrypt.key=${ENCRYPT_KEY}

# Encriptación asimétrica(Asymmetric Encryption - RSA - La clave pública se usa para encriptar y la clave privada se usa para desencriptar)
# Para encriptar -> Petición http POST a la ruta "/encrypt" junto con el texto plano que se quiere encriptar en el body, o cuerpo, de dicha petición http
# Para desencriptar -> Petición http POST a la ruta "/decrypt" junto con el texto encriptado que se quiere desencriptar en el body, o cuerpo, de dicha petición http
# Nota: Si no indicamos el prefijo "classpath:" o "file:", por defecto se usa "classpath:"
encrypt.key-store.location=keystore/apiEncryptionKey.jks
encrypt.key-store.password=${KEY_STORE_PASSWORD}
encrypt.key-store.alias=apiEncryptionKey

spring.application.name=PhotoAppApiConfigServer
# Si activamos el perfile "native"("git" es el perfil por defecto), este servidor de configuraciones usará el sistema de archivos nativo como repositorio o almacén de configuraciones, es decir, usará el sistema de archivos de la máquina en lugar de un repositorio remoto como Git 
spring.profiles.active=native

spring.cloud.config.server.native.search-locations=../dev
# Indicamos dónde está el repositorio Git que contiene las configuraciones de los microservicios
spring.cloud.config.server.git.uri=https://github.com/manulc50/PhotoAppConfiguration
# Como el repositorio Git es privado, tenemos que especificar las credenciales en las 2 siguientes propiedades:
spring.cloud.config.server.git.username=${GIT_USERNAME}
# Nota: Las nuevas versiones de GitHub requieren un "Personal Access Token", es decir, ya no vale la contraseña con la que nos registramos en GitHub
spring.cloud.config.server.git.password=${GIT_PASSWORD}
# Indicamos que el repositorio Git se clone localmente de forma automática en el arranque de esta aplicación o servidor de configuraciones 
spring.cloud.config.server.git.clone-on-start=true
# Indicamos que la rama por defecto del respositorio Git es "main" en lugar de "master"
# Esto es debido a que actualmente los nuevos repositorios que se crean en Github tienen como rama por defecto "main" en vez de "master" y si no los indicamos en esta propiedad, se intentará localizar por defecto la rama "master" que no existe y, por lo tanto, no arrancará esta aplicación o servidor de configuraciones
spring.cloud.config.server.git.default-label=main

# Exponemos los endpoints "health" y busrefresh" de Spring Actuator
management.endpoints.web.exposure.include=health,busrefresh

# Host y puerto del broker de mensajería RabbitMQ y sus credenciales. En este caso son opcionales porque usamos los valores por defecto
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=${RABBITMQ_USERNAME}
spring.rabbitmq.password=${RABBITMQ_PASSWORD}

# Desactivamos Spring Cloud Bus cuando no queremos que se conecte ni haga reintentos de conexión con el broker de mensajería RabbitMQ
spring.cloud.bus.enabled=false
# Como hemos desactivado Spring Cloud Bus y usamos Spring Boot Actuator, también deactivamos la comprobación de salud de RabbitMQ para
# que no afecte a la comprobación de salud de esta aplicación Spring Boot
management.health.rabbit.enabled=false