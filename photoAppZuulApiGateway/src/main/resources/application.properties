server.port: 8011
spring.application.name: zuul

eureka.client.serviceUrl.defaultZone: http://localhost:8010/eureka

# Nota: Si Zuul está registrado en el servidor de descubrimiento Eureka, como en este caso, podemos usar directamente el enrutamiento automático de la siguiente forma:
# Por ejemplo, envío de petición http Get a http://localhost:8011/account-ws/account/status/check, donde "account-ws" es el nombre usado por el microservicio en el servidor Eureka y "/account/status/check" es el endpoint al que queremos acceder

# Nota: Zuul viene por defecto con el balanceador de carga Ribbon que, de forma automática, balancea la carga en caso de que haya más de una instancia de un determinado microservicio

# Nota: Zuul por defecto establece cabeceras de tipo proxy("X-Forwarded-*") en las peticiones http de enrutamiento que realiza.
# Si se quiere evitar que Zuul las ponga, debe ponder en false la propiedad "zuul.add-proxy-headers".

api.registration.url.path: /users-ws/users
api.login.url.path: /users-ws/users/login
api.h2console.url.path: /users-ws/h2-console/**
api.zuul.actuator: /actuator/**
api.users.actuator.url.path: /users-ws/actuator/**
authorization.token.header.name: Authorization
authorization.token.header.prefix: Bearer
token.secret: ${env.TOKEN_SECRET}

# Host y puerto del broker de mensajería RabbitMQ y sus credenciales. En este caso son opcionales porque usamos los valores por defecto
spring.rabbitmq.host: localhost
spring.rabbitmq.port: 5672
spring.rabbitmq.username: ${env.RABBITMQ_USERNAME}
spring.rabbitmq.password: ${env.RABBITMQ_PASSWORD}

# Desactivamos Spring Cloud Bus cuando no queremos que se conecte ni haga reintentos de conexión con el broker de mensajería RabbitMQ
spring.cloud.bus.enabled: false
# Como hemos desactivado Spring Cloud Bus y usamos Spring Boot Actuator, también deactivamos la comprobación de salud de RabbitMQ para
# que no afecte a la comprobación de salud de esta aplicación Spring Boot
management.health.rabbit.enabled: false

# Exponemos los endpoints "health", "routes" y "mappings" de Spring Actuator
management.endpoints.web.exposure.include: health,routes,mappings

# Zuul por defecto elimina la cabecera "Authorization" de las peticiones http en caso de que exista debido a que el valor por defecto de la propiedad "zuul.sensitive-headers" es "Cookie,Set-Cookie,Authorization"
# Para hacer que Zuul no elimine dicha cabecera para permitir que llegue a los microservicios, establecemos el siguiente valor en la propiedad, es decir, eliminamos "Authorization" del valor
zuul.sensitive-headers: Cookie,Set-Cookie

ribbon.ReadTimeout: 60000