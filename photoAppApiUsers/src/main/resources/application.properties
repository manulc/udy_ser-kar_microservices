spring.config.import=optional:configserver:http://localhost:8012,optional:.env[.properties]

# El valor 0 de esta propiedad indica que el puerto se elige aleatoriamente entre los disponibles de la máquina
server.port=${PORT:0}
server.error.include-message=always

# Importante para el registro de este microservicio en el servidor Eureka como cliente. Se usará este nombre para el registro
spring.application.name=users-ws
# Propiedad para indicar donde se encuentra el servidor de descubrimiento Eureka para que este microservicio se registre como cliente
# Si se omite, por defecto se intenta localizar al servidor en la url "http://localhost:8761/eureka", es decir, el puerto 8761 es el puerto por defecto del servidor Eureka si no se establece otro puerto
# En nuestro caso en concreto, se ha establecido el puerto 8010 para el servidor Eureka
eureka.client.service-url.defaultZone=http://localhost:8010/eureka
# Si dos o más instancias de un microservicio se registran en el servidor Eureka con el mismo nombre y el mismo puerto, únicamente se mantiene en el servidor Euureka la última instancia registrada
# Como estamos usando el valor 0 para generar puertos aleatorios en cada instancia, Eureka siempre toma el valor 0 para el puerto en el registro de dichas instancias. Entonces, para asegurarnos de que todas las instancias de un microservicio se registran en Eureka, usamos la siguiente propiedad con el siguiente valor para que sean únicos:
# Cada instancia del microservicio se registrará usando el nombre del microservicio(${spring.application.name} seguido de ":" y seguido del valor de la propiedad "${spring.application.instance_id}" si existe. Si no existe esa propiedad, se utiliza, a continuación de los ":", un valor aleatorio único generado por la expresión "${random.value}" 
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# Aunque ahora estamos usando una base de datos MySQL, podemos dejar esta propiedad para poder acceder a esa base de datos MySQL usando la consola de H2
# Nota: Si tenemos "Devtools" como dependencia en el classpath, por defecto la consola de H2 queda habilitada. En caso contrario, podemos habilitarla manualmente con esta propiedad
#spring.h2.console.enabled=true
# Por defecto, la base de datos H2 tiene una protección que sólo permite conexiones directas. Si queremos acceder a ella de forma intermediaria, por ejemplo
# a través de un API Gateway o través del Dashboard de Eureka, tenemos que activar esta propiedad
#spring.h2.console.settings.web-allow-others=true

# Datos de conexión con la base de datos H2
spring.datasource.url=jdbc:h2:mem:photo-app-db
spring.datasource.username=${MYSQL_USERNAME}
spring.datasource.password=${MYSQL_PASSWORD}
spring.jpa.hibernate.ddl-auto=update

# IP donde se ejecuta nuestro API Gateway
gateway.ip=192.168.0.13

# 10 días en milisegundos
token.expiration_time=864000000
token.secret=${TOKEN_SECRET}
authorization.token.header.name=Authorization
authorization.token.header.prefix=Bearer

# Por defecto, Spring Security proporcina la ruta "/login" para realizar el proceso de login de un usuario
# Usamos esta propiedad nuestra para establecer nuestra propia ruta de login
login.url.path=/users/login

albums.path=users/{userId}/albums
albums.url=http://albums-ws/${albums.path}
albums.exceptions.albums-not-found=User albums are not found

# Host y puerto del broker de mensajería RabbitMQ y sus credenciales. En este caso son opcionales porque usamos los valores por defecto
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=${RABBITMQ_USERNAME}
spring.rabbitmq.password=${RABBITMQ_PASSWORD}

# Desactivamos Spring Cloud Bus cuando no queremos que se conecte ni haga reintentos de conexión con el broker de mensajería RabbitMQ
spring.cloud.bus.enabled=false
# Como hemos desactivado Spring Cloud Bus y usamos Spring Boot Actuator, también deactivamos la comprobación de salud de RabbitMQ para
# que no afecte a la comprobación de salud de esta aplicación Spring Boot
management.health.rabbit.enabled=false

# Normalmente, este endpoint ya viene activado por defecto
#management.endpoint.health.enabled=true
#management.endpoint.health.show-details=always
# Para mostrar información sobre el estado del Circuit Breaker en el endpoint "health"
# Nota: Para visualizar dicha información, tiene que habilitarse también mostrar los detalles del endpoint "health" usando la propiedad de arriba
#management.health.circuitbreakers.enabled=true
# Exponemos los endpoints "beans", "health", "mappings" y "httpexchanges" de Spring Actuator
management.endpoints.web.exposure.include=beans,health,mappings,httpexchanges,circuitbreakerevents

# Establecemos el nivel de logging debug para el cliente Feign que se encuentra en la interfaz "AlbumsServiceFeignClient" del paquete "com.mlorenzo.photoapp.api.users.clients"
# Sólo para depurar en el entorno de Desarrollo
logging.level.com.mlorenzo.photoapp.api.users.clients.AlbumsServiceFeignClient=debug

# Configuraciones del módulo CircuitBreaker para la instancia "albums-ws"
# Como estamos ejecutando varios módulos de Resilience4j(Retry y CircuitBreaker), por defecto se ejecutan en un order predeterminado(ver documentación de Resilience4j sobre Aspect Order)
# Por defecto, el módulo CircuitBreaker se ejcuta primero y después el módulo Retry
# Con esta propiedad establecemos la prioridad de ejecución del módulo CircuitBreaker(Como la prioridad de este módulo CircuitBreaker es más baja que la del módulo Retry(1 respecto a 2), este módulo CircuitBreaker se ejecutará después del módulo Retry)
resilience4j.circuitbreaker.circuit-breaker-aspect-order=1
# Porcentaje de fallos para que se abra el Circuit Breaker
resilience4j.circuitbreaker.instances.albums-ws.failure-rate-threshold=50
# Si es true, la transición del estado open al estado half-open se realiza automáticamente sin que tenga que producirse una llamada adicional
# Si es false, dicha transición se produce cuando se hace una llamada adicional 
resilience4j.circuitbreaker.instances.albums-ws.automatic-transition-from-open-to-half-open-enabled=true
# Tiempo de permanencia en el estado open antes de transicionar al estado half-open(También puede indicarse en ms usando la expresión "10000ms")
resilience4j.circuitbreaker.instances.albums-ws.wait-duration-in-open-state=10s
# Tipo de la ventana deslizante(cuenta el número de registros cuando el estado es close). Puede ser COUNT_BASED(cantidad de llamadas) o TIME_BASED
resilience4j.circuitbreaker.instances.albums-ws.sliding-window-type=COUNT_BASED
# Tamaño de la ventana deslizante(cuenta el número de registros cuando el estado es close)
# Como la propiedad "failure-rate-threshold" está establecida en 50(la mitad) y el tamaño de la ventana es 2, 1 llamada fallida hará que el estado pase de close a open
resilience4j.circuitbreaker.instances.albums-ws.sliding-window-size=2
# Mínimo número de llamadas que tienen que producirse para que el Circuit Breaker calcule la tasa de fallos cuando se está en el estado half-open
resilience4j.circuitbreaker.instances.albums-ws.minimum-number-of-calls=1
# Esta propiedad es útil establecerla cuando estamos monitorizando los eventos del Circuit Breaker mediante el endpoint "circuitbreakerevents" de Actuator
# En este caso, indicamos que se monitoricen los 10 últimos eventos del Circuit Breaker
resilience4j.circuitbreaker.instances.albums-ws.event-consumer-buffer-size=10

# Configuraciones del módulo Retry para la instancia "albums-ws"
# Como estamos ejecutando varios módulos de Resilience4j(Retry y CircuitBreaker), por defecto se ejecutan en un order predeterminado(ver documentación de Resilience4j sobre Aspect Order)
# Por defecto, el módulo CircuitBreaker se ejecuta primero y después el módulo Retry
# Con esta propiedad establecemos la prioridad de ejecución del módulo Retry(Como la prioridad de este módulo Retry es más alta que la del módulo CircuitBreaker(2 respecto a 1), este módulo Retry se ejecutará antes)
resilience4j.retry.retry-aspect-order=2
# Numéro máximo de reintentos en caso de fallo
resilience4j.retry.instances.albums-ws.max-attempts=3
# Tiempo de espera para realizar cada reintento
resilience4j.retry.instances.albums-ws.wait-duration=2s
# Habilita el incremento exponencial del tiempo de espera en cada reintento
resilience4j.retry.instances.albums-ws.enable-exponential-backoff=true
# El tiempo de espera para realizar cada reintento se multiplicará cada vez por 5
resilience4j.retry.instances.albums-ws.exponential-backoff-multiplier=5

# En esta versión de Spring Boot, por defecto se envía a Zipkin un 10% de las trazas
# Si ponemos el valor "0.1", significa que se envía un 10% de información(1 de cada 10 trazas) al servidor Zipkin
# Si ponemos el valor "1", significa que se envía el 100% de la información(trazas) al servidor Zipkin
# Nota: En Producción, debe establecerse valores bajos en esta propiedad para no perjudicar el rendimiento de la aplicación
management.tracing.sampling.probability=1

# Formato o patrón de los logs para mostrar los ids de los span y los ids de las trazas
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

# Para la centralización de logs en un único sitio usando el stack ELK, es necesario esribir los logs en un fichero(Hasta ahora los logs sólo se mostraban por consola)
# Para ello usamos la siguiente propiedad:
# Como no hemos especificado ninguna ruta, el archivo se crea en el directorio raíz del proyecto de esta aplicación Spring Boot
#logging.file.name=${spring.application.name}.log
logging.file.name=../api-logs/${spring.application.name}.log

myapplication.environment=development profile

#logging.level.org.springframework.security=trace
